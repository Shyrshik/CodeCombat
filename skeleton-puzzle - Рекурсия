#https://codecombat.com/play/level/skeleton-puzzle
# Solve the puzzle and the treasures will be yours.
# Say numbers from 1 to 8 to move skeletons.
# The necromancer always knows the puzzle state.
hero.wait(2) #Скелеты ну успевают расставиться на места
boneMaster = hero.findFriends()[0]
puzzleState = boneMaster.getPuzzleState()
# The result state should be this:
goalState = [[1,2,3],[4,5,6],[7,8,0]]
rt=0        #Колличество запусков рекурсии
def Pekypcu(x,y,State,PX,raz):
    l=0     #проверка выполнения задания
    rt+=1   #счетчик перезапусков
    if rt%50 ==0:          #если не шевелится - сервер забанит за      
        if (rt/50)%2==1:   #бесконечный цикл, почему то на ходу 
            hero.moveXY(73, 34)     #думается быстрее))
        else:
            hero.moveXY(73, 33)
    if rt>5000:
        return [20]
    for i in range(0,3,1):
        for j in range(0,3,1):
            
            if goalState[i][j]==State[i][j]:
                l+=1
    if l==9 :   #выход из рекурсии если задача решена
        hero.say("Решение найдено. ")
        return [PX]
    if raz>12:  #выход из рекурсии если не найдено решение за 12 ходов
        return [20]
    x0=0        #блок условий, для меньшего количества перезапусков
    y0=0        #State[строка x][столбец y]
    if State[0][0]==1 and State[0][1]==2 and State[0][2]==3:
        x0=1
    if State[0][0]==1 and State[1][0]==4  and State[2][0]==7:
        y0=1
    Xod = [[10,10,10],[10,10,10],[10,10,10],[10,10,10]]
    xn=0    #Xod - массив ходов, отсортированный по приоритету
    xk=3    #xn - наибольший приоритет, xk- наименьший приоритет
    #сортировка массива Xod:
    if x-1>=x0 and State[x-1][y]<>PX:
        if int( State[x-1][y]/3)>=x:
            Xod[0][0]=State[x-1][y]
            Xod[0][1] = x-1
            Xod[0][2] = y
            xn=1
            #hero.say("Xod[0]")
        else:
            Xod[3][0]=State[x-1][y]
            Xod[3][1] = x-1
            Xod[3][2] = y
            xk=2
    if y-1>=y0 and State[x][y-1]<>PX:
        if int( (State[x][y-1]+2)%3)>=y:
            Xod[xn][0]=State[x][y-1]
            Xod[xn][1]=x
            Xod[xn][2]=y-1
            xn+=1
        else:
            Xod[xk][0]=State[x][y-1]
            Xod[xk][1]=x
            Xod[xk][2]=y-1
            xk-=1
    y+=1
    if y<3 and State[x][y]<>PX:
        if int( (State[x][y]+2)%3)<=y-1:
            Xod[xn][0]=State[x][y]
            Xod[xn][1]=x
            Xod[xn][2]=y
            xn+=1
        else:
            Xod[xk][0]=State[x][y]
            Xod[xk][1]=x
            Xod[xk][2]=y
            xk-=1
    y-=1
    x+=1
    if x<3 and State[x][y]<>PX:
        if int( State[x][y]/3)<=x-1:
            Xod[xn][0]=State[x][y]
            Xod[xn][1]=x
            Xod[xn][2]=y
            xn+=1
        else:
            Xod[xk][0]=State[x][y]
            Xod[xk][1]=x
            Xod[xk][2]=y
            xk-=1
    x-=1
    #hero.say("Xod = "+Xod+"State = "+State)
    for s in Xod:   #обход результатов
        if s[0]>0 and s[0]<10 :
            #создаем новую переменную, т.к.State-ссылка
            State1 = [[1,2,3],[4,5,6],[7,8,0]]
            for i in range(0,3,1): 
                for j in range(0,3,1):
                    State1[i][j]=State[i][j]
            
            State1[x][y]=s[0]       #меняем местами скелета с пустой 
            State1[s[1]][s[2]]=0    #ячейкой
            tt=Pekypcu(s[1],s[2],State1,s[0],raz+1) #следующий ход
            if tt[0]<10 and tt[0]>0:
                #если задача решена, то возвращается номер скелета от 1
                #до 9, иначе возвращается 20 в виде массива
                tt.push(PX) #на каждом шаге массив дописывается
                return tt
    return [20]
ps=[[1,1,1],[1,1,1],[1,1,1]]
for a in range(3):  #находим пустую ячейку
    
    for b in range(3):
        ps[a][b] = puzzleState[a][b]
        if puzzleState[a][b]==0:
            x=a
            y=b

a=[20]
a=Pekypcu(x,y,ps,0,0)
hero.say("Было просчитано "+rt+" ходов")
#обход результатов в обратном порядке, пото мучто рекурсия записывает
#результаты в массив начиная с последнего хода
for b in range(len(a)-1,0,-1):
    hero.say(""+a[b-1])

